---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
  labels:
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: 1.16.0
    networking.knative.dev/ingress-provider: kourier
  name: 3scale-kourier-gateway
  namespace: kourier-system
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: 3scale-kourier-gateway
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        networking.knative.dev/poke: v0.26
        prometheus.io/path: /stats/prometheus
        prometheus.io/port: "9000"
        prometheus.io/scrape: "true"
      labels:
        app: 3scale-kourier-gateway
    spec:
      containers:
      - args:
        - --base-id 1
        - -c /tmp/config/envoy-bootstrap.yaml
        - --log-level info
        - --drain-time-s $(DRAIN_TIME_SECONDS)
        - --drain-strategy immediate
        command:
        - /usr/local/bin/envoy
        env:
        - name: DRAIN_TIME_SECONDS
          value: "15"
        - name: CERTS_SECRET_NAMESPACE
          value: "default"
        - name: CERTS_SECRET_NAME
          value: "blanketops"
        image: docker.io/envoyproxy/envoy:v1.31-latest
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - curl -X POST http://localhost:9901/drain_listeners?graceful; sleep $DRAIN_TIME_SECONDS
        livenessProbe:
          failureThreshold: 6
          httpGet:
            httpHeaders:
            - name: Host
              value: internalkourier
            path: /ready
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        name: kourier-gateway
        ports:
        - containerPort: 8080
          name: http2-external
          protocol: TCP
        - containerPort: 8081
          name: http2-internal
          protocol: TCP
        - containerPort: 8443
          name: https-external
          protocol: TCP
        - containerPort: 8090
          name: http-probe
          protocol: TCP
        - containerPort: 9443
          name: https-probe
          protocol: TCP
        - containerPort: 9000
          name: metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            httpHeaders:
            - name: Host
              value: internalkourier
            path: /ready
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "1"
            memory: 800Mi
          requests:
            cpu: 200m
            memory: 200Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /tmp/config
          name: config-volume
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: kourier-bootstrap
        name: config-volume
